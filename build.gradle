buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.springframework:springloaded:1.2.6.RELEASE'
    }
}
plugins {
    id "com.moowork.node" version "0.13"
}


apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'
apply plugin: 'application'

mainClassName = "com.example.BootmanApplication"
applicationDefaultJvmArgs = [
        "-Dfile.encoding=UTF8"
]

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

jar {
    baseName = 'bootman'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
repositories {
    mavenCentral()
}
allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }
}

dependencies {
    compile('net.sf.ehcache:ehcache')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.11.RELEASE'
    runtime('com.h2database:h2')
    runtime('mysql:mysql-connector-java')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}



task neverUpToDate(group: 'All-Tasks-ReRun')

neverUpToDate.dependsOn('assembleDist')

gradle.taskGraph.whenReady { taskGraph ->
    taskGraph.beforeTask {
        switch (it.name) {
            default:
                if (taskGraph.hasTask(neverUpToDate)) {
                    it.outputs.upToDateWhen { false }
                }
        }
    }
}

node {
    version = '6.9.1'
    npmVersion = '3.10.8'
    download = true
    workDir = file("${project.projectDir}/endorsed")
    nodeModulesDir = file("${project.projectDir}")
}

task bundle(type: NpmTask) {
    inputs.file(new File('package.json'))
    inputs.file(new File('webpack.config.js'))
    inputs.dir(new File('web'))
    outputs.dir(new File("$buildDir/resources/main/static/content/"))
    args = ['run', 'bundle']
}


bundle.dependsOn(npmInstall)
jar.dependsOn(bundle)
